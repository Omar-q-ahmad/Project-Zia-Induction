// Generated by CoffeeScript 1.6.2
var T;

T = {
  testData: {},
  user: {},
  init: null,
  notify: null,
  picReady: 0,
  cI: null,
  socket: null,
  ninja: document.createElement('div'),
  useOffline: false,
  Utils: {}
};

T.init = function() {
  /* Check facebook login
  	if not FB.getUserID()
  		FB.login (_response)->
  			console.log "Signed into facebook."
  			console.log _response
  		, {scope: 'publish_stream'}
  */
  $('.box.app').css('height', (document.height - 50).toString() + 'px');
  return null;
};

T.handleLoading = function() {
  $(".tb-loader").hide();
  if ($(".loading").length) {
    $(".overlay").css('display', 'block');
  }
  $(".tb-loader").show("drop", {
    direction: "up"
  }, 500, function() {
    return null;
  });
  window.setTimeout(function() {
    $(".tb-loader .anim").removeClass('anim');
    return $(".tb-loader").hide("drop", {
      direction: 'down'
    }, 300, function() {
      /*$(".loading").hide "fade", ()->
      				$(".overlay").css 'display', 'none'
      				window.location.href = './pic-upload.html'
      */
      $("ul.loader-menu").show("drop", {
        direction: "down"
      }, 400);
      return console.log("Loading Handled");
    });
  }, 4000);
  return null;
};

T.canvasAnim = function(_params) {
  var canvas, ctx, draw, osfn;

  osfn = _params != null ? _params : [Math.sin, Math.cos];
  canvas = $(".ldcanvas")[0];
  ctx = canvas.getContext('2d');
  ctx.fillStyle = '#555';
  ctx.strokeStyle = '#555';
  draw = function(params) {
    var x, xVal, xVal2, xVal3, y, yVal, yVal2, yVal3;

    canvas.width = document.width + 2000;
    canvas.height = document.height;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    x = y = 0;
    while (true) {
      xVal = Math.PI / 180 * (x % 360);
      yVal = Math.round((canvas.height / 2) + (Math.sin(xVal) * 50));
      xVal2 = Math.PI / 180 * (x % 360);
      yVal2 = Math.round((canvas.height / 2) + (Math.cos(xVal) * 60));
      xVal3 = Math.PI / 180 * (x % 360);
      yVal3 = Math.round((canvas.height / 2) + (Math.sin(xVal + 9) * 40));
      ctx.fillRect(x, yVal, 1, 1);
      ctx.fillRect(x, yVal2, 1, 1);
      ctx.fillRect(x, yVal3, 1, 1);
      x = x + 4;
      if (x >= canvas.width) {
        break;
      }
    }
    ctx.save();
    return null;
  };
  draw(osfn);
  return null;
};

T.reset = function() {
  return $(".box.main .footer").removeClass("animated").removeClass("needy").text("");
};

T.actionlist = {
  target: null,
  findTarget: function() {
    if ($(".actionlist").length) {
      return T.actionlist.target = $(".actionlist");
    } else {
      return console.log("No actionlist on this page");
    }
  },
  clear: function() {
    var tt;

    tt = T.actionlist.target;
    return tt.find('li').hide("slide", {
      direction: 'up'
    }, 400, function() {
      return $(this).remove();
    });
  },
  addActions: function(_actionsArray) {
    var key, _i, _jj, _len, _results;

    _jj = _actionsArray;
    if (!T.actionlist.target) {
      T.actionlist.findTarget();
    }
    _results = [];
    for (_i = 0, _len = _jj.length; _i < _len; _i++) {
      key = _jj[_i];
      _results.push(T.actionlist.addOne(_jj.indexOf(key), key));
    }
    return _results;
  },
  addOne: function(_id, _text) {
    var _aa;

    _aa = $("<li/>").addClass('action').attr('data-actionid', _id.toString());
    _aa.append($("<i/>").addClass('icomoon-minus'));
    _aa.append($("<span/>").addClass('name').text(_text));
    if (!T.actionlist.target) {
      T.actionlist.findTarget();
    }
    return T.actionlist.target.append(_aa);
  },
  replace: function(_actionsArray) {
    if (!T.actionlist.target) {
      T.actionlist.findTarget();
    }
    T.actionlist.clear();
    return T.actionlist.addActions(_actionsArray);
  }
};

T.actions = function(_action, _target) {
  switch (_action) {
    case 'navigate':
      T.navigate(_target);
      break;
    case 'initCamera':
      T.initCamera(_target);
      break;
    case 'takePicture':
      T.captureImage(_target);
      break;
    case 'getLatestPostShare':
      T.getLatestPostShare(_target);
      break;
    case 'publishWelcome':
      T.publishWelcome(_target);
      break;
    case 'prevPost':
      T.likePosts.prev();
      break;
    case 'nextPost':
      T.likePosts.next();
      break;
    case 'getLikePosts':
      T.get5LikePosts(_target);
      break;
    case 'populateMP3':
      T.Music.Populate(_target);
      break;
    default:
      console.log("Unknown Action");
  }
  return null;
};

T.publishWelcome = function(_target) {
  var _url;

  _url = "http://tagbin.in/phpHandler/status_post.php";
  $('.box.main .footer').addClass('needy').text("Swipe to Post");
  T.serial.readM(function(_tagid) {
    console.log(_tagid);
    $('.box.main .footer').text("Got tagID, Posting...");
    $.post(_url, {
      tagID: T.serial.tagID
    }, function(response) {
      console.log(response);
      $('.box.main .footer').text("Successfully Posted").delay(2000).hide("slide", {
        direction: "up"
      }, 400, function() {
        return $(".overlay").show("fade");
      });
      return null;
    });
    return null;
  });
  return null;
};

T.b64toblob = function(b64Data, contentType, sliceSize) {
  var blob, byteArray, byteArrays, byteCharacters, byteNumbers, charCodeFromCharacter, offset, slice;

  contentType = contentType || '';
  sliceSize = sliceSize || 1024;
  charCodeFromCharacter = function(c) {
    return c.charCodeAt(0);
  };
  byteCharacters = atob(b64Data);
  byteArrays = [];
  offset = 0;
  while (offset < byteCharacters.length) {
    slice = byteCharacters.slice(offset, offset + sliceSize);
    byteNumbers = Array.prototype.map.call(slice, charCodeFromCharacter);
    byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
    offset += sliceSize;
  }
  blob = new Blob(byteArrays, {
    type: contentType
  });
  return blob;
};

T.imgToB64 = function(url, _callback) {
  var cc, ctx, img;

  cc = document.createElement('canvas');
  ctx = cc.getContext('2d');
  img = document.createElement('img');
  img.src = url;
  cc.width = img.width;
  cc.height = img.height;
  ctx.drawImage(img, 0, 0);
  if (_callback) {
    return _callback(cc.toDataURL());
  } else {
    return cc.toDataURL();
  }
};

T.videoEl = null;

T.webcamSource = null;

T.initCamera = function(_target) {
  var navigator, onError, onSuccess;

  navigator = navigator || window.navigator;
  onSuccess = function(stream) {
    var video;

    if (T.videEl) {
      console.log("Video Element Resume");
      T.videoEl.play();
      return null;
    } else {
      video = $(_target)[0];
      video.autoplay = true;
      T.webcamSource = window.URL.createObjectURL(stream);
      video.src = T.webcamSource;
      video.play();
      T.videoEl = video;
      return null;
    }
  };
  onError = function() {
    return console.log("Failed to initialize camera");
  };
  navigator.webkitGetUserMedia({
    video: true,
    audio: false
  }, onSuccess, onError);
  console.log("Camera Initiated");
  window.setTimeout(function() {
    console.log(T.videoEl);
    console.log("Now Resuming Play");
    $(".box.main .footer").text("Click on Capture");
    $(".box.main .footer").slideDown();
    if (T.videoEl) {
      T.videoEl.play();
    }
    return null;
  }, 1000);
  return null;
};

T.captureImage = function(_target, _cb) {
  var k, video, _i, _len, _ref;

  video = $(_target)[0];
  _ref = [1, 2, 3, 4, 5];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    k = _ref[_i];
    $(video).parent().find(".countdown").append($("<div/>").addClass("c" + k.toString()).text(k.toString()));
  }
  $(video).parent().find(".countdown").append($("<div/>").addClass('flash'));
  window.setTimeout(function() {
    var canvas, ctx, imgframe, _data;

    video.pause();
    canvas = document.createElement('canvas');
    canvas.width = 640;
    canvas.height = 480;
    ctx = canvas.getContext('2d');
    imgframe = document.createElement('img');
    imgframe.src = "./static/img/frame.png";
    ctx.drawImage(video, 0, 0, 640, 480);
    ctx.drawImage(imgframe, 0, 0, 640, 480);
    _data = canvas.toDataURL();
    console.log("Generated data-uri for image");
    $(".box.main .footer").text("Swipe your card");
    T.picUpload(_data);
    return null;
  }, 5100);
  /* Re-create the image on canvas and export base64 encoded image data
  */

  if (_cb) {
    _cb(_data);
  }
  return null;
};

T.connect = function(options, _cb) {
  var _postURL;

  _postURL = "http://tagbin.in/phpHandler/getDetails.php";
  return $.ajax({
    url: _postURL,
    type: 'post',
    data: {
      type: options.type,
      tagID: options.tagID
    },
    cache: false,
    success: function(data) {
      console.log(data);
      if (_cb) {
        return _cb(data);
      }
    },
    error: function(e) {
      return console.log(e);
    }
  }).done(function() {
    return console.log("Finished");
  });
};

T.getData = function(_tagID, _callback) {
  return T.connect({
    tagID: _tagID
  }, function(_response) {
    if (_callback) {
      _callback(_response);
    }
    return console.log("Details Done!");
  });
};

T.gdURL = "http://tagbin.in/phpHandler/getDetails.php";

T.latestPostData = null;

T.getLatestPost = function(_target) {
  var _ops, _url;

  console.log("Fetching latest post");
  _url = "http://tagbin.in/phpHandler/getDetails.php";
  _ops = {
    type: 'getLatestPost'
  };
  $(".box.main .footer").addClass('needy').text("Fetching Latest Post...");
  $.post(_url, _ops, function(response) {
    var _from, _id, _likesCount, _message;

    console.log(JSON.parse(response));
    window.RESPONSE1 = JSON.parse(response).data[0];
    T.latestPostData = window.RESPONSE1;
    _message = T.latestPostData.message;
    _id = T.latestPostData.from.id;
    _from = T.latestPostData.from.name;
    _likesCount = T.latestPostData.likes.count;
    $("#latestpost .who-posted").text(_from);
    $("#latestpost .post-text p").text(_message);
    $("#latestpost .post-likes .count").text(_likesCount.toString());
    $.post(T.gdURL, {
      id: _id,
      type: 'getUserPicture'
    }, function(_res) {
      var _bb, _bburl;

      _bb = T.b64toblob(_res, 'image/jpg');
      _bburl = window.webkitURL.createObjectURL(_bb);
      $("#latestpost").parent().find('img').attr('src', _bburl);
      $(".box.main .footer").addClass('needy').text("Swipe to Like").slideDown();
      return T.serial.readM(function(_tagid) {
        console.log(_tagid);
        $('.box.main .footer').text("Got TagID, Processing...");
        return $(T.ninja).trigger('likePost');
      });
    });
    return null;
  });
  return null;
};

T.getLatestPostShare = function(_target) {
  var _ops, _url;

  console.log("Fetching latest post");
  _url = "http://tagbin.in/phpHandler/getDetails.php";
  _ops = {
    type: 'getLatestPost'
  };
  $.post(_url, _ops, function(response) {
    var _from, _id, _likesCount, _message;

    console.log(JSON.parse(response));
    window.RESPONSE1 = JSON.parse(response).data[0];
    T.latestPostData = window.RESPONSE1;
    _message = T.latestPostData.message;
    _id = T.latestPostData.from.id;
    _from = T.latestPostData.from.name;
    _likesCount = T.latestPostData.likes.count;
    $("#latestpost-share .who-posted").text(_from);
    $("#latestpost-share .post-text p").text(_message);
    $("#latestpost-share .post-likes .count").text(_likesCount.toString());
    $.post(T.gdURL, {
      id: _id,
      type: 'getUserPicture'
    }, function(_res) {
      var _bb, _bburl;

      _bb = T.b64toblob(_res, 'image/jpg');
      _bburl = window.webkitURL.createObjectURL(_bb);
      $("#latestpost-share").parent().find('img').attr('src', _bburl);
      $(".box.main .footer").addClass('needy').text("Swipe to Share").slideDown();
      return T.serial.readM(function(_tagid) {
        console.log(_tagid);
        $('.box.main .footer').text("Got TagID, Sharing...");
        return $(T.ninja).trigger('sharePost');
      });
    });
    return null;
  });
  return null;
};

T.getImage = function(_url) {
  var _ops;

  console.log(_url);
  _url = "http://tagbin.in/phpHandler/getDetails.php";
  _ops = {
    type: 'getLatestPost'
  };
  return $.post(_url, _ops, function(response) {});
};

T.updateLikes = function(_target) {};

T.get5LikePosts = function(_target) {
  var _TARGET;

  _TARGET = _target;
  $(_TARGET).empty();
  return $.post("http://tagbin.in/phpHandler/fb_getposts.php", {
    type: 'get5Posts'
  }, function(responseStr) {
    var i, response, _li, _obj;

    $(_TARGET).addClass('inProcess');
    i = 0;
    response = JSON.parse(responseStr.toString());
    console.log(response.data);
    while (true) {
      _obj = response.data[i];
      _li = T.Utils.NewPost(_obj);
      if (response.data.indexOf(_obj) === parseInt('2')) {
        _li.addClass('active');
      }
      $(_TARGET).append(_li);
      i++;
      if (i === response.data.length) {
        break;
      }
    }
    $(_TARGET).removeClass('inProcess');
    T.likePosts.next();
    T.likePosts.prev();
    return T.likePosts.prev();
  });
};

T.likePosts = {
  _url: 'http//tagbin.in/phpHandler/fb_likeposts.php',
  _container: '.posts-list',
  _target: null,
  get: function(_callback) {
    $.post("http://tagbin.in/phpHandler/getDetails.php", {
      type: 'get5Posts'
    }, function(response) {});
    T.likePosts.next();
    T.likePosts.prev();
    T.likePosts.prev();
    return $(".box.main .footer").text("Swipe to Like...");
  },
  next: function() {
    var actvP, nextP, target, _aa, _activePost;

    target = $(".posts-list");
    _activePost = $(target).find(".social-post.active");
    actvP = $(_activePost);
    _aa = $(target).find('.social-post');
    if (actvP[0] === _aa.eq(_aa.length - 1)[0]) {
      return;
    }
    nextP = $(_activePost).next();
    actvP.removeClass('active').addClass('hidden').removeClass('tiltdown').addClass('tiltup');
    nextP.removeClass('hidden').addClass('active').parent().stop().animate({
      'scrollTop': actvP[0].offsetTop + 100
    }, 300);
    return console.log("Next Post");
  },
  prev: function() {
    var actvP, prevP, target, _aa, _activePost;

    target = $(".posts-list");
    _activePost = $(target).find(".social-post.active");
    actvP = $(_activePost);
    _aa = $(target).find('.social-post');
    if (actvP[0] === _aa.eq(0)[0]) {
      return;
    }
    prevP = $(_activePost).prev();
    actvP.removeClass('active').addClass('hidden').removeClass('tiltup').addClass('tiltdown');
    prevP.removeClass('hidden').addClass('active').parent().stop().animate({
      'scrollTop': actvP[0].offsetTop - 395
    }, 300);
    return console.log("Prev Post");
  }
};

T.Music = {
  LIB: null,
  Player: document.createElement('audio'),
  getLib: function(_callback) {
    return $.getJSON("./music.json", function(response) {
      T.Music.LIB = JSON.parse(response);
      console.log("music.json loaded");
      T.Music.Player.preload = true;
      T.Music.Player.autoplay = true;
      T.Music.Player.volume = 1;
      if (_callback) {
        return _callback();
      }
    });
  },
  Populate: function(_target) {
    $.ajax({
      url: 'music.json',
      cache: false,
      type: 'GET',
      dataType: 'json',
      error: function(err) {
        return console.log("EFETCH: Error fetching music.json, " + err);
      },
      success: function(response) {
        var i, item, _li, _results;

        T.Music.Player.preload = true;
        T.Music.Player.autoplay = true;
        T.Music.Player.volume = 1;
        T.Music.LIB = response;
        $(_target).find('.title').text("PLAYLIST [" + response.length.toString() + " Songs]");
        i = 1;
        _results = [];
        while (true) {
          item = response.data[i];
          _li = $("<li/>").addClass('song').attr('data-id', i.toString()).text(item.title[0]);
          $(_target).find('ul').append(_li);
          i++;
          if (i === response.length + 1) {
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
    return null;
  },
  onSongClick: function(_songID, _target) {
    var dd;

    dd = T.Music.LIB.data[_songID];
    $(".player li.title").text(dd.title[0]);
    $(".player li.artist").text(dd.artist[0]);
    $(".player li.album").text(dd.album[0]);
    T.Music.getArt(dd, _target);
    return T.Music.Play(dd, _target);
  },
  Play: function(dd, el) {
    $(".play-list ul li.active").removeClass('active');
    el.addClass('active');
    T.Music.Player.src = dd.filePath;
    return console.log('MUSIC: Playing ' + dd.title[0]);
  },
  getArt: function(_object, el) {
    var dd, query, _url;

    dd = _object;
    _url = "https://www.googleapis.com/customsearch/v1?key=__key__&searchType=image&q=__query__&alt=__alt__&cx=__cx__";
    _url = _url.replace('__key__', "AIzaSyCNBmZI7X9zOF-UMocaXCpaMEV-prsCWCY");
    _url = _url.replace('__alt__', "json");
    _url = _url.replace('__cx__', "015983474732296187492:hmmm431-awc");
    query = dd.artist[0] + " " + dd.album[0] + " album art";
    _url = _url.replace('__query__', encodeURIComponent(query));
    return $.getJSON(_url, function(response) {
      console.log(response.items[0].link);
      $("img.player-art").attr('src', response.items[0].link);
      return null;
    });
  }
};

T.navigate = function(_target) {
  return $.ajax({
    url: _target,
    cache: false,
    success: function(_res) {
      $(".app-content").hide("slide", {
        direction: 'down'
      }, 300, function() {
        $(".app-content").html(_res);
        $(".app-content").show("slide", {
          direction: 'up'
        }, 300);
        $('.box.app').css('height', (document.height - 50).toString() + 'px');
        console.log("Searching for .loadActions");
        console.log($(".loadActions").length);
        $(".loadActions").each(function(_index) {
          T.actions($(this).attr('data-action'), $(this).attr('data-target'));
          return null;
        });
        return null;
      });
      return null;
    },
    error: function(_res) {
      console.log("Error results");
      return null;
    }
  }).done(function(_res) {
    console.log("Navigation Done");
    /*
    		switch _target
    			when 'pic-upload.html' then T.actionlist.replace(['Capture Image', 'Swipe Tag', 'Upload'])
    			when 'like-post.html' then T.navActions('navLikePost')
    			when 'share.html' then T.actionlist.replace(['Swipe Tag', 'Share Post'])
    			when 'tagplay.html' then T.actionlist.replace(['Choose Track', 'Swipe Tag', 'Play'])
    			when 'status-post.html' then T.actionlist.replace(['Swipe Tag', 'Post Status'])
    			else console.log "Actionlist not defined"
    		# Process the actions pane
    */

    return null;
  });
};

T.navActions = function(_action) {
  if (_action === 'navLikePost') {
    T.actionlist.replace(['Swipe Tag', 'Like Post']);
    console.log("done-navlikepost");
  } else {
    console.log("Default Nav Action");
  }
  return null;
};

T.updateView = function(_iconclass, _viewname) {
  $(".box.main i")[0].className = _icon;
  $(".box.main h3").text(_viewname);
  return $(".box.main").show("drop", {
    direction: "left"
  }, 300);
};

$(T.ninja).on('sendPhoto', function(e) {
  var _url, _urlTemp;

  _url = "http://tagbin.in/phpHandler/fb_post.php";
  _urlTemp = "http://tagbinphp-temp.herokuapp.com/phpHandler/fb_post.php";
  $.post(_url, {
    imgdata: T.readyImageData,
    tagID: T.serial.tagID
  }, function(response) {
    console.log(response);
    $(".box.main .footer").text("Successfully Uploaded").delay(2000).hide("slide", {
      direction: "up"
    }, 400, function() {
      return $(".overlay").show("fade");
    });
    return null;
  });
  return null;
});

$(T.ninja).on('likePost', function(e) {
  var _options, _url;

  _url = "http://tagbin.in/phpHandler/fb_likepost.php";
  _options = {
    postID: T.latestPostData.id,
    tagID: T.serial.tagID
  };
  $.post(_url, _options, function(_response) {
    console.log(_response);
    $('.box.main .footer').removeClass('animated').addClass('success').text("Successfully Liked!").delay(2000).hide("slide", {
      direction: "up"
    }, 400, function() {
      $(".overlay").show("fade");
      return $(".post-likes .count").text(T.latestPostData.likes.count + 1);
    });
    return null;
  });
  return null;
});

$(T.ninja).on('sharePost', function(e) {
  var _options, _url;

  _url = "http://tagbin.in/phpHandler/share.php";
  _options = {
    postID: T.latestPostData.id,
    tagID: T.serial.tagID
  };
  $.post(_url, _options, function(_response) {
    console.log(_response);
    $('.box.main .footer').removeClass('animated').addClass('success').text("Successfully Shared!").delay(2000).hide("slide", {
      direction: "up"
    }, 400, function() {
      return $(".overlay").show("fade");
    });
    return null;
  });
  return null;
});

T.notifications = {
  create: function(options) {
    var _nf;

    $(".frontlayer .notification").remove();
    _nf = $("<div/>").addClass('notification');
    _nf.addClass(options.color);
    _nf.text(options.message);
    $(".frontlayer").append(_nf);
    $(".frontlayer").eq(0).css('margin-left', parseInt($(this).width() / -2));
    return $(".frontlayer .notification").eq(0).show("drop", {
      direction: 'up'
    }, 400);
  },
  clear: function() {
    return $(".notification").hide("drop", {
      direction: 'up'
    }, 400, function() {
      return $(this).remove();
    });
  }
};

T.picUpload = function(_imgdata) {
  T.picReady = 1;
  console.log("Ready to post the details");
  console.log("Ask for tag swipe");
  T.readyImageData = _imgdata;
  console.log("Swipe the Tag Now");
  T.serial.readM(function(_tagid) {
    console.log(_tagid);
    $(".box.main .footer").addClass('needy').text("Got TagID, Now Uploading");
    return $(T.ninja).trigger('sendPhoto');
  });
  return null;
};

T.serial = {
  DEVICE_READY: false,
  DEVICE_TIMEOUT: 500,
  DEVICE_PORT: "/dev/ttyUSB0",
  DEVICE_VENDORID: '2341',
  DEVICE_PRODUCTD: '0010',
  S: chrome.serial,
  interval: null,
  connInfo: null,
  connId: null,
  tagID: null,
  isProcessing: false,
  callback: null,
  readM: function(_cb) {
    if (T.serial.isProcessing) {
      window.clearInterval(T.serial.interval);
    }
    T.serial.isProcessing = true;
    T.serial.open();
    T.serial.callback = _cb;
    return null;
  },
  open: function() {
    /*T.serial.S.getPorts (ports)->
    			T.DEVICE_PORT = ports[0]
    			console.log T.DEVICE_PORT, "Proceed to reading tag"
    */
    T.serial.S.open(T.serial.DEVICE_PORT, {
      bitrate: 9600
    }, T.serial.onOpen);
    return null;
  },
  onOpen: function(connectionInfo) {
    T.serial.connInfo = connectionInfo;
    T.serial.connId = T.serial.connInfo.connectionId;
    if (T.serial.connInfo.connectionId === -1) {
      console.log("System Permissions error on: " + T.serial.DEVICE_PORT);
    }
    if (typeof T.serial.connInfo.connectionId === 'number') {
      return T.serial.listen();
    } else {
      return console.error("Port cannot be opened, Some other error has occured");
    }
  },
  listen: function() {
    var setInterval;

    setInterval = setInterval || window.setInterval;
    T.serial.interval = setInterval(function() {
      return T.serial.S.read(T.serial.connId, 128, T.serial.onRead);
    }, T.serial.DEVICE_TIMEOUT);
    return null;
  },
  onRead: function(readInfo) {
    if (!T.serial.connId) {
      return;
    }
    if (readInfo && readInfo.bytesRead > 0 && readInfo.data) {
      return T.serial.processOutput(readInfo.data);
    } else {
      return console.log("Swipe tag to read");
    }
  },
  processOutput: function(_arrayBuffer) {
    var doNothing, str;

    str = T.serial._ab2str(_arrayBuffer);
    str = str.split('\n')[0].split(' ')[0];
    if (str === '' || NaN || " " || "\n") {
      console.log("Retrying...");
      $(T.ninja).trigger('showRetry');
    }
    if (str.length.toString() === '22' || str.length.toString() === '24') {
      T.serial.tagID = str;
      return T.serial.readSuccess();
    } else {
      return doNothing = 1;
    }
  },
  readSuccess: function() {
    var clearInterval;

    clearInterval = clearInterval || window.clearInterval;
    clearInterval(T.serial.interval);
    T.serial.S.close(T.serial.connId, function(result) {
      console.log("Serial Port Closed");
      console.log("Value of tag from T.serial.tagID");
      return T.serial.isProcessing = false;
    });
    if (typeof T.serial.callback === 'function') {
      return T.serial.callback(T.serial.tagID);
    } else {
      return console.log("No Callbacks, use T.readM(_callback) for reading tag with a callback");
    }
  },
  readTag: function(readInfo) {
    var str, tmp;

    str = T.serial._ab2str(readInfo.data);
    console.log("Tag read successful, tagID: " + str.toString());
    console.log(T.serial.tagID + str);
    tmp = T.serial.tagID + str;
    T.serial.tagID = tmp.split('\n')[0].split(' ')[0];
    $(T.ninja).trigger('gotTagID');
    T.serial.reset();
    return null;
  },
  fullTagID: function(readInfo) {
    var _data;

    if (!T.serial.connId) {
      return;
    }
    if (readInfo && readInfo.bytesRead > 0 && readInfo.data) {
      _data = T.serial._ab2str(readInfo.data);
      T.serial.tagID = _data.split('\n')[0].split(' ')[0];
      console.log("tagID: " + T.serial.tagID);
      return $(T.ninja).trigger('gotTagID');
    } else {
      return console.log("Swipe tag to read");
    }
  },
  reset: function() {
    var clearInterval;

    clearInterval = clearInterval || window.clearInterval;
    clearInterval(T.serial.interval);
    T.serial.S.close(T.serial.connId, function(result) {
      return console.log("Closed Serial Port");
    });
    T.serial.open();
    return null;
  },
  _ab2str: function(buf) {
    return String.fromCharCode.apply(null, new Uint8Array(buf));
  }
};

T.activeSocketID = 0;

T.sockets = function() {
  var onSocketCreateSuccess, s;

  s = null;
  /* Initialize Chrome socket to read rfid tag event
  	chrome.socket.create "tcp", {"bind": "127.0.0.1", "port": "5556"}, (result)->
  		s = result if result
  		console.log result
  */

  T.socket = chrome.socket;
  onSocketCreateSuccess = function(socketInfo) {
    var address, port, socketId;

    socketId = socketInfo.socketId;
    T.activeSocketID = socketId;
    address = '127.0.0.1';
    port = 6338;
    T.socket.listen(socketId, address, port, function(result) {
      console.assert(0 === result);
      T.socket.getInfo(socketId, function(info) {
        console.log('tagMachine Listener on http://localhost:' + info.localPort);
        T.socket.accept(socketId, function(acceptInfo) {
          var acceptedSocketId;

          console.assert(0 === acceptInfo.resultCode);
          acceptedSocketId = acceptInfo.socketId;
          console.log('acceptedSocketID', acceptedSocketId);
          T.socket.read(acceptedSocketId, function(readInfo) {
            T.aB2Str(readInfo.data, function(str) {
              var nlen;

              nlen = str.toString().split("\n");
              T.gotID = nlen[nlen.length - 1].slice(6);
              console.log('readInfo.data', T.gotID);
              $(T.ninja).trigger('sendPhoto');
              $(".box.main .footer").text("Uploading your photo");
              return null;
            });
            return null;
          });
          return null;
        });
        return null;
      });
      return null;
    });
    return null;
  };
  return T.socket.create("tcp", {}, onSocketCreateSuccess);
};

T.aB2Str = function(buf, callback) {
  var blob, f;

  blob = new Blob([new Uint8Array(buf)]);
  f = new FileReader();
  f.onload = function(e) {
    return callback(e.target.result);
  };
  f.readAsText(blob);
  return null;
};

T.socketReset = function() {
  chrome.socket.destroy(T.activeSocketID, function(result) {
    console.log(result);
    return console.log("Closed Socket");
  });
  console.log("Creating Socket...");
  return T.sockets();
};

T.Utils = {
  RandCoord: function() {
    var _x, _y;

    _x = Math.floor(Math.random() * document.width);
    _y = Math.floor(Math.random() * document.height);
    return [parseInt(_x), parseInt(_y)];
  },
  Distance: function(p1, p2) {
    var dx, dy;

    dx = p2.x - p1.x;
    dy = p2.y - p1.y;
    return Math.sqrt(dx * dx + dy * dy);
  },
  NewPost: function(_data) {
    /* Structure of _data
    			|-- likes
    			|	-- count
    			|	-- data[]
    			|     -- id
    			|     -- name
    			|-- from 
    			|	-- id 
    			|	-- name
    			|-- id
    			|-- message
    */

    var from_id, from_name, likes_count, likes_data, message, post_id, _k, _ll, _pobj, _ref, _ref1, _ref2, _ref3, _ref4, _tt;

    likes_count = (_ref = _data.likes.count) != null ? _ref : "0";
    likes_data = (_ref1 = _data.likes.data) != null ? _ref1 : null;
    message = (_ref2 = _data.message) != null ? _ref2 : "No Message";
    from_name = (_ref3 = _data.from.name) != null ? _ref3 : "User";
    from_id = (_ref4 = _data.from.id) != null ? _ref4 : "No ID";
    post_id = _data.id;
    _pobj = $("<div/>");
    _pobj.addClass("social-post row-fluid").append($("<div/>").addClass('span3')).append($("<div/>").addClass('span9')).attr('data-post-id', post_id);
    _pobj.find('.span3').append($("<div/>").addClass('pic-whoposted').attr('data-user-id', from_id));
    console.log("Adding Picture: " + from_id);
    _pobj.find('.pic-whoposted').css('background-image', 'url("http://graph.facebook.com/' + from_id + '/picture?type=large")');
    _pobj.find('.span9').append($("<div/>").addClass('who-posted').text(from_name)).append($("<div/>").addClass('post-text')).append($("<div/>").addClass('post-likes'));
    _pobj.find('.post-likes').append($("<div/>").addClass('count').text(likes_count)).append($("<div/>").addClass('text').text('people like this'));
    _pobj.find('.post-text').append($("<p/>").text(message));
    _pobj.addClass('hidden tiltup');
    _pobj.find('.span9').append($("<ul/>").addClass("like-users"));
    _k = 0;
    while (true) {
      _tt = likes_data[_k];
      _ll = $("<li/>").attr('data-id', _tt.id).attr('data-name', _tt.name).css('background-image', 'url("http://graph.facebook.com/' + _tt.id + '/picture?type=large")');
      _pobj.find("ul.like-users").append(_ll);
      _k++;
      if (_k === likes_data.length) {
        break;
      }
    }
    return _pobj;
  }
};

T.addPicture = function(_source, _target) {
  var _webv;

  return _webv = document.createElement('webview');
};

T.getCSSProps = function(_target, _array) {};

T.setCSSProps = function(_target, _array) {};
